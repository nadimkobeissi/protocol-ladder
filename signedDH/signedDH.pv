(*
 * Protocol:	  Signed Diffie-Hellman
 * Modeler: 	  Charlie Jacomme
 * Date:        April 2025
 *
 * Status: 	    Finished
 * 
 * attacker:    active
 * sessions:    unbounded ∞ 
 * agents:      unbounded ∞ 
 * compromises: long-term keys (LTK), ephemeral keys (EK)
 * primitives:  hash, signatures, diffie-hellman
 * properties:  executability, session_key_secrecy, forward_secrecy, client_side_authentication
 * difficulty:  easy
 *
 ==============================================================================
 Expected result:

--------------------------------------------------------------
Verification summary:

Query event(ServerAccept(s_pk_2,x_pk_2,y_pk_2,k)) && event(ClientAccept(s_pk_2,x_pk_2,y_pk_2,k)) ==> event(CompromiseServer(s_pk_2)) is false.

Query inj-event(ClientAccept(s_pk_2,x_pk_2,y_pk_2,k)) && event(HonestServer(s_pk_2)) ==> event(CompromiseServer(s_pk_2)) || inj-event(ServerAccept(s_pk_2,x_pk_2,y_pk_2,k)) is true.

Query event(ClientAccept(s_pk_2,x_pk_2,y_pk_2,k))@i && event(HonestServer(s_pk_2)) && attacker(k) ==> (event(CompromiseServer(s_pk_2))@j && i > j) || event(CompromiseClientShare(x_pk_2)) || event(CompromiseServerShare(y_pk_2)) is true.

Query event(ServerAccept(s_pk_2,x_pk_2,y_pk_2,k))@i && event(HonestClientShare(x_pk_2)) && attacker(k) ==> event(CompromiseClientShare(x_pk_2)) || event(CompromiseServerShare(y_pk_2)) is true.

--------------------------------------------------------------


real	0m0,023s
user	0m0,018s
sys	0m0,004s

*)

(*
=====================
Function Definitions
=====================
*)

(* A public communication channel for the network *)
free c: channel.


(* Types for the different values we need *)

(* keypairs for signatures *)
type pkey.
type skey.

(* dh elements *)
type G.
type Z.

(* Signatures functions *)

fun SIGsign(bitstring, skey): bitstring.
fun pk(skey):pkey.

reduc forall m: bitstring, k: skey; getmess(SIGsign(m,k)) = m.

reduc forall m: bitstring, k: skey; SIGverify(SIGsign(m,k),m, pk(k)) = true.


(* Diffie-Hellman *)

const g: G.
fun exp(G, Z): G.
equation forall x: Z, y: Z; exp(exp(g, x), y) = exp(exp(g, y), x).


letfun DHkeygen() =
       new a : Z;
       (a, exp(g,a)).

(* KDF *)

fun Hash(G) : bitstring.


(*
=====================
Security queries
=====================
*)

(* Events for security queries *)

event HonestServer(pkey).
event CompromiseServer(pkey).

event HonestClientShare(G).
event CompromiseClientShare(G).

event HonestServerShare(G).
event CompromiseServerShare(G).

event ServerAccept(pkey,G,G,bitstring).
event ClientAccept(pkey,G,G,bitstring).


(*
Sanity check, executability.
 must be false, we want a session to terminate with an honest and uncompromised server. 
*)
query s_pk:pkey, x_pk,y_pk:G, k : bitstring;
      event(ServerAccept(s_pk,x_pk,y_pk,k))
   && event(ClientAccept(s_pk,x_pk,y_pk,k))
   ==> event(CompromiseServer(s_pk)).

(* Client-side authentication *)
query s_pk:pkey, x_pk,y_pk:G, k : bitstring;
      (* if a client accept *)
      inj-event(ClientAccept(s_pk,x_pk,y_pk,k))
      &&
      (* and the s_pk is from an honest server *)
      event(HonestServer(s_pk))
         ==>
	    (
	    (* either the server was compromised *)   
	    event(CompromiseServer(s_pk))
	    ||
	    (* or there is a matching session, (in an injective fashion) *)
	    inj-event(ServerAccept(s_pk,x_pk,y_pk,k))
	    )
.


(* Forward Secrecy, client side *)
query s_pk:pkey, x_pk,y_pk:G, k : bitstring, i,j:time;
      (* if a client accept *)
      event(ClientAccept(s_pk,x_pk,y_pk,k))@i
      &&
      (* and the s_pk is from an honest server *)
      event(HonestServer(s_pk))
      &&
      attacker(k)
         ==>
	    (
	    (* either the server public was compromised in the past *)   
	    event(CompromiseServer(s_pk))@j && j<i
	    ||
	    (* or the corresponding client share was compromised *)
	    event(CompromiseClientShare(x_pk))
	    ||
	    (* or the corresponding server share was compromised *)
	    event(CompromiseServerShare(y_pk))	    
	    )
.


(* Forward Secrecy, server side *)
query s_pk:pkey, x_pk,y_pk:G, k : bitstring, i,j:time;
      (* if a client accept *)
      event(ServerAccept(s_pk,x_pk,y_pk,k))@i
      &&
      (* and the x_pk is from an honest client *)
      event(HonestClientShare(x_pk))
      &&
      attacker(k)
         ==>
	 (
	 (* either the corresponding client share was compromised *)	 
	  event(CompromiseClientShare(x_pk))
	  ||
	  (* or the corresponding server share was compromised *)
	  event(CompromiseServerShare(y_pk))
	 )
.


(*
=====================
Protocol model
=====================
*)

(* Client process *)
let Client(s_pk:pkey) =

    (* First message *)	      
    let (x_sk:Z,x_pk:G) = DHkeygen() in
    event HonestClientShare(x_pk); (* we log the fact that this is an honest ephemeral. *)
    out(c, x_pk);

    (* on a dummy input, we give the attacker the power to compromise the ephemeral. *)
    (in(c,0); event CompromiseClientShare(x_pk); out(c,x_sk))
    |
    
    (* Second message *)
    in(c, (y_pk:G,sig:bitstring));
    if SIGverify(sig, (x_pk,y_pk), s_pk) then
       let k_C = Hash( exp(y_pk,x_sk)) in
       event ClientAccept(s_pk,x_pk,y_pk,k_C); (* we log that we accepted *)
       
       0.

let Server(s_sk:skey,s_pk:pkey) =

    in(c, x_pk:G);
    let (y_sk:Z,y_pk:G) = DHkeygen() in    
    let sig = SIGsign((x_pk,y_pk),s_sk) in
    let k_S = Hash( exp(x_pk,y_sk)) in
    event ServerAccept(s_pk,x_pk,y_pk,k_S); (* we log that we accepted *)
    out(c, (y_pk,sig))

    (* on a dummy input, we give the attacker the power to compromise the ephemeral. *)
    |
    (in(c,0); event CompromiseServerShare(y_pk); out(c,y_sk))
.

process
	!
	(
	(* Initiatialize a new server identity, under the ! replication *)
	new s_sk: skey;
	let s_pk = pk(s_sk) in
	event HonestServer(s_pk);
	out(c, s_pk);

	(* spawn for this identity an unbounded number of sessions *)
	! Server(s_sk,s_pk)
	
	(* on a dummy input, we give the attacker the power to compromise the public key. *)	
	| (in(c, =0); event CompromiseServer(s_pk); out(c,s_sk))
	)
	|
	(* spawn an unbounded number of clients *)
	( ! in(c,s_pk:pkey); Client(s_pk))
