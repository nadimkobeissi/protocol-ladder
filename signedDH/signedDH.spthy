/*
 * Protocol:	  Signed Diffie-Hellman
 * Modeler: 	  Aurora Naska
 * Date:        February 2025
 *
 * Status: 	    Finished
 * 
 * attacker:    active
 * sessions:    unbounded ∞ 
 * agents:      unbounded ∞ 
 * compromises: long-term keys (LTK) + emphemeral keys (EK)
 * primitives:  hash, signatures, diffie-hellman
 * properties:  executability, session_key_secrecy, forward_secrecy, client_side_authentication
 * difficulty:  easy
 *
 ==============================================================================
  summary of summaries:

  analyzed: signedDH.spthy

  processing time: 0.40s
  
  ExecutabilityClient (exists-trace): verified (2 steps)
  ExecutabilityServer (exists-trace): verified (4 steps)
  ExecutabilityClientEnd (exists-trace): verified (7 steps)
  BothPartiesCanReachEnd (exists-trace): verified (8 steps)
  ServerKeySecrecy (all-traces): falsified - found trace (6 steps)
  SessionKey_Secrecy (all-traces): verified (14 steps)
  ForwardSecrecy (all-traces): verified (14 steps)
  ClientSide_Injective_Authentication (all-traces): verified (11 steps)
  Unique_Commits (all-traces): verified (10 steps)
  ClientSide_Injective_Authentication_simplified (all-traces): verified (7 steps)

==============================================================================

real	0m0,447s
user	0m1,261s
sys	  0m0,062s
 */
 
theory SignedDH
begin

builtins: hashing, diffie-hellman, signing

/* This is a restriction that ensures in any rule with the Eq(x,y) action, the terms
matched by the variables x and y are the same. The modeler can then add an Eq action to 
any rule where such an equality is desired, e.g., check that signature verification succeeds.
*/
restriction Eq:
  "All x y #i. Eq(x, y) @ #i ==> x = y"

// Generate Server's long-term (s_sk, s_pk).
rule Generate_serverLtk:
  let pkS = pk(~sk) 
  in
  [ Fr(~sk) ]
  -->
  [ !Ltk($S, ~sk), 
    !Pk($S, pkS), 
    Out(pkS) ]

// Client generates DH pair (x_sk, x_pk), and sends the public key Out(x_pk).
rule Client_Init:
  let x_pk = 'g'^~x_sk
  in
  [ Fr(~x_sk)]
  --[ ClientInitMessage()]->
  [ Out(x_pk), StateC($C, ~x_sk), !EK(~x_sk, x_pk) ]

/*Server generates their own DH pair (y_sk, y_pk),
  sign the public keys of client and server (serverSign),
  calculates the session key (K_S), and
  send the public key and signature to client Out(<y_pk, serverSign>).*/
rule Server_Init:
  let 
    y_pk = 'g'^~y_sk 
    serverSign = sign(<x_pk, y_pk>, ~s_sk)
    dh_output = x_pk^~y_sk
    K_S = h(dh_output)
    m = <y_pk, serverSign>
  in
  [ !Ltk($S, ~s_sk), 
    Fr(~y_sk)
  , In(x_pk) ]
  --[ ServerInitMessage(),
      ServerAccepts($S, x_pk, y_pk, pk(~s_sk), serverSign, K_S),
      SecretServer($S, K_S) ]->
  [ Out(m), !EK(~y_sk, y_pk) ]

/*Client receives message In(<y_pk serversign>), 
  verifies the server's signature and derives the session key K_C.*/
rule Client_Accepts:
  let
    m = <y_pk, serverSign>
    x_pk = 'g'^~x_sk
    dh_output = y_pk^~x_sk
    K_C = h(dh_output)
  in
  [ StateC($C, ~x_sk),
    !Pk($S, s_pk),
    In(m) ]
  --[  Eq(verify(serverSign, <x_pk, y_pk>, s_pk), true),
      ClientAccepts($S, x_pk, y_pk, s_pk, serverSign, K_C),
      SecretClient($S, K_C, ~x_sk, y_pk),
      ClientRecvMessage()]->
  [ ]

// The attacker learns the server's long-term key.
rule Compromise_LTK:
  [ !Ltk($S, ~sk)]
  --[CompromiseLtk($S, ~sk)]->
  [ Out(~sk) ]

// The attacker learns the emphemeral key.
rule Compromise_EphemeralKey:
  [  !EK(~x_sk, x_pk)]
  --[CompromiseEphemeralKey(~x_sk, x_pk)]->
  [ Out(~x_sk) ]

// Sanity Traces to check executability of the model
lemma ExecutabilityClient:
  exists-trace
  "Ex #i. ClientInitMessage() @ #i"

lemma ExecutabilityServer:
  exists-trace
  "Ex #i. ServerInitMessage() @ #i"

lemma ExecutabilityClientEnd:
  exists-trace
  "Ex #i. ClientRecvMessage() @ #i"

lemma BothPartiesCanReachEnd:
  exists-trace
  "Ex S x_pk y_pk s_pk serverSign sessKey #i #j. i < j &
    ServerAccepts(S, x_pk, y_pk, s_pk, serverSign, sessKey) @ #i &
    ClientAccepts(S, x_pk, y_pk, s_pk, serverSign, sessKey) @ #j "


/* Secrecy of established session key for the server.
   Should not hold, Tamarin shows the falsified trace. 
   (The client could have been an attacker, therefore it knows the established key.)*/
lemma ServerKeySecrecy:
  "All S sessKey #i. SecretServer(S, sessKey) @ #i 
    ==> 
      not(Ex #j. K(sessKey) @ #j)
    | (Ex s_sk #j. CompromiseLtk(S, s_sk)@ #j)
    | (Ex eKey ePubKey #j. CompromiseEphemeralKey(eKey, ePubKey)@ #j)"

/* If a client establishes successfully a session with key: sesskey, 
  the attacker does not know this secret, unless they compromise 
  the server's long-term key, or the DH ephemeral keys. */
lemma SessionKey_Secrecy:
  "All S sessKey x_sk y_pk #i. SecretClient(S, sessKey, x_sk, y_pk) @ #i 
    ==> 
      not(Ex #j. K(sessKey) @ #j)
    | (Ex s_sk #j. CompromiseLtk(S, s_sk)@ #j)
    | (Ex x_pk #j. CompromiseEphemeralKey(x_sk, x_pk)@ #j)
    | (Ex y_sk #j. CompromiseEphemeralKey(y_sk, y_pk)@ #j)"

/* If the attacker learns the session key sessKey, then they must have 
  compromised the server before or they compromised the ephemeral keys. 
  Compromising the server in the future, does not break the secrecy of previous sessions.*/
lemma ForwardSecrecy:
  "All S sessKey x_sk y_pk #i #k. 
      SecretClient(S, sessKey, x_sk, y_pk) @ #i &
      K(sessKey) @ k
    ==>
        (Ex s_sk #j. CompromiseLtk(S, s_sk) @ j & j < i )
      | (Ex x_pk #j. CompromiseEphemeralKey(x_sk, x_pk)@ #j)
      | (Ex y_sk #j. CompromiseEphemeralKey(y_sk, y_pk)@ #j)"

/* At the end of the protocol, if the client establishes a session with key: sessKey,
  then there is a corresponding server S session with the same parameters and
  there are no two commits with the same parameters.
  Otherwise the server was compromised */
lemma ClientSide_Injective_Authentication:
  "All S x_pk y_pk s_pk serverSign sessKey #i. 
      ClientAccepts(S, x_pk, y_pk, s_pk, serverSign, sessKey) @ #i 
   ==>  
      (Ex #j. j<i & ServerAccepts(S, x_pk, y_pk, s_pk, serverSign, sessKey) @ #j
                  & not(Ex #t. ClientAccepts(S, x_pk, y_pk, s_pk, serverSign, sessKey) @ #t 
                        & not(#t=#i)))
    | (Ex s_sk #j. CompromiseLtk(S, s_sk)@ #j)"

lemma Unique_Commits:
  "All S x_pk y_pk s_pk serverSign sessKey #i #j. 
      ClientAccepts(S, x_pk, y_pk, s_pk, serverSign, sessKey) @ #i &
      ClientAccepts(S, x_pk, y_pk, s_pk, serverSign, sessKey) @ #j
    ==> #i=#j"

/* At the end of the protocol, if the client establishes a session with key: sessKey,
  then there is a corresponding server S session with the same parameters, 
  otherwise the server was compromised.
  The previous lemma: Unique Commits proved that: 
  There are no two client commits with the same parameters.*/
lemma ClientSide_Injective_Authentication_simplified:
  "All S x_pk y_pk s_pk serverSign sessKey #i. 
      ClientAccepts(S, x_pk, y_pk, s_pk, serverSign, sessKey) @ #i 
   ==>  
      (Ex #j. j<i & ServerAccepts(S, x_pk, y_pk, s_pk, serverSign, sessKey) @ #j)
    | (Ex s_sk #j. CompromiseLtk(S, s_sk)@ #j)"

end
