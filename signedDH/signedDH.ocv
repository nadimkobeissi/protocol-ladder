(*
 * Protocol:	  Signed Diffie-Hellman
 * Modeler: 	  Charlie Jacomme
 * Date:        April 2025
 *
 * Status: 	    Finished
 * 
 * attacker:    active
 * sessions:    unbounded ∞ 
 * agents:      unbounded ∞ 
 * compromises: long-term keys (LTK)
 * primitives:  hash, signatures, diffie-hellman
 * properties:  forward_secrecy, client_side_authentication
 * difficulty:  easy
 *

This is a common example, variants can be found in CryptoVerif tutorials as https://bblanche.gitlabpages.inria.fr/CryptoVerif/tutorial/index.html or https://github.com/charlie-j/summer-school-2023/tree/master. 


 ==============================================================================
Expected result (see end of file for discussion):

RESULT Proved forall y_pk, x_pk: G, s_pk: pkey; inj-event(ClientAccept(s_pk, x_pk, y_pk)) ==> inj-event(ServerAccept(s_pk, x_pk, y_pk)) with public variables kCtest, kStest up to probability (NC * NS2 + 3 * NC^2) * PCollKey1 + NS * PSIGsign(time_1, NS2, length(msg2))
Adv[Game 1: secrecy of kStest] <= (2 * #OS2^3 * NC + 2 * qH * #OS2^2 * NC) * pCDH(time_2) + (2 * #OS2^2 * NC + 4 * #OS2 * NC * qH + 6 * #OS2^2 * NC^2) * PCollKey2 + (8 * #OS2 * NC + 2 * NC * NS2 + 6 * NC^2) * PCollKey1 + 2 * NS * PSIGsign(time_1, NS2, length(msg2)) + Adv[Game 23: secrecy of kStest]
Adv[Game 23: secrecy of kStest] <= 0
RESULT Proved secrecy of kStest up to probability (2 * qH * #OS2^2 * NC + 2 * #OS2^3 * NC) * pCDH(time_2) + (6 * #OS2^2 * NC^2 + 4 * #OS2 * NC * qH + 2 * #OS2^2 * NC) * PCollKey2 + (6 * NC^2 + 2 * NC * NS2 + 8 * #OS2 * NC) * PCollKey1 + 2 * NS * PSIGsign(time_1, NS2, length(msg2))
Adv[Game 1: secrecy of kCtest] <= (2 * #OS2^3 * NC + 2 * qH * #OS2^2 * NC) * pCDH(time_2) + (2 * #OS2^2 * NC + 4 * #OS2 * NC * qH + 6 * #OS2^2 * NC^2) * PCollKey2 + (8 * #OS2 * NC + 2 * NC * NS2 + 6 * NC^2) * PCollKey1 + 2 * NS * PSIGsign(time_1, NS2, length(msg2)) + Adv[Game 23: secrecy of kCtest]
Adv[Game 23: secrecy of kCtest] <= 0
RESULT Proved secrecy of kCtest up to probability (2 * qH * #OS2^2 * NC + 2 * #OS2^3 * NC) * pCDH(time_2) + (6 * #OS2^2 * NC^2 + 4 * #OS2 * NC * qH + 2 * #OS2^2 * NC) * PCollKey2 + (6 * NC^2 + 2 * NC * NS2 + 8 * #OS2 * NC) * PCollKey1 + 2 * NS * PSIGsign(time_1, NS2, length(msg2))
RESULT time_1 = (NC + #OS2) * time(msg2) + (NC + #OS2 + qH) * time(Hash) + (2 * NC + 2 * #OS2) * time(exp) + NC * time(([1,NC])) + #OS2 * time(mult) + #OS2 * time(([1,NS2], [1,NS])) + time + (NS * NC - 1) * time(SIGverify, length(msg2), maxlength(game 7: s)) + (NS * NS2 - NS2) * time(SIGsign, length(msg2)) + (2 * NS - 1) * time(skgen) + (NS - 1) * time(pkgen)
RESULT time_2 = (NC * NS + NC * NS2 + NS) * time(pkgen) + (NC + #OS2) * time(msg2) + NC * NS2 * time(SIGverify, maxlength(game 20: m1), maxlength(game 20: s)) + (NS + #OS2) * time(skgen) + #OS2 * time(SIGsign, maxlength(game 20: x_1)) + #OS2 * time(SIGsign, maxlength(game 20: x)) + time + (#OS2^2 + qH * #OS2 + 3 * #OS2 + NC - 3) * time(exp)
All queries proved.

real	0m0,082s
user	0m0,072s
sys	0m0,010s

*)


(* CryptoVerif is almost able to prove the queries in this model automatically.
   In the automated mode, it uses the base uf-cma assumption, which does not
   allow for the compromise of the longterm key and fails.

   We use the interactive mode to start by applying the corrupt variant of the
   assumption, and the proof is then automatic.

   We give the end of the proof for the idea however. *)

proof
{

(* Apply the uf-cma assumption *)
crypto uf_cma_corrupt(SIGsign);

(*  out_game "g01.ocv";  *)
(* Here, we already proved the injective authentication. *)
success;

(* the rest of the proof is automatic if need be, simply uncomment auto. *)
(* auto *)

(* Otherwise, apply the ROM transform *)
crypto rom(Hash);
  
(*  out_game "g02.ocv";  *)

(* The the cdh transform *)
crypto cdh(exp);

(* all good! *)
success

}


(*
=====================
Function Definitions
=====================
*)


type host [bounded].

type Z [large,bounded].
type G [large,bounded].
type key [fixed].

(* Basic Diffie-Hellman declarations *)
(* expand relies on the CryptoVerif builtin library, found in the cryptoverif folder, `default.ocvl` *)
expand DH_basic(G, Z, g, exp, exp', mult).


letfun DHkeygen() =
       a <-R Z;
       (a, exp(g,a)).
       
(* This collision assumption is needed to prove an injective
   correspondence, because we use ephemerals to distinguish sessions. *)
proba PCollKey1.
proba PCollKey2.

(* DH_proba_collision says that
   - the probability that exp(g, x) = Y for random x and Y independent of x
   is at most PCollKey1, and
   - the probability that exp(g, mult(x,y)) = Y where x and y are independent
   random private keys and Y is independent of x or y is at most PCollKey2.
*)
expand DH_proba_collision(
  G,        (* type of group elements *)
  Z,        (* type of exponents *)
  g,        (* group generator *)
  exp,      (* exponentiation function *)
  exp',     (* exp. func. after transformation *)
  mult,     (* func. for exponent multiplication *)
  PCollKey1,(*  *)
  PCollKey2
).

(* CDH assumption *)
proba pCDH.
expand CDH(G, Z, g, exp, exp', mult, pCDH).


(* Hash in the random oracle model *)
type hashfunction [fixed].
expand ROM_hash(
  hashfunction, (* type for hash function choice *)
  G,            (* type of input *)
  key,          (* type of output *)
  Hash,         (* name of Hash function *)
  Hashoracle,   (* process defining the Hash oracle *)
  qH            (* parameter: number of calls *)
).

(* Concatenation helper functions *)
fun msg2(G, G):bitstring [data].


(* Signatures *)

type keyseed [large,fixed].
type pkey [bounded].
type skey [bounded].

proba PSIGsign.
proba PSIGsigncoll.
(* expand UF_CMA_det_SIGsignature( *)


(* We do not use the macro expansion, for pedagogical purposes. *)
(*
expand UF_CMA_proba_signature(
  (* types, to be defined outside the macro *)
  keyseed,
  pkey,
  skey,
  message,
  signature,
  (* names for functions defined by the macro *)
  skgen,
  pkgen,
  SIGsign,
  SIGverify,
  (* probabilities, to be defined outside the macro *)
  PSIGsign,     (* breaking the UF-CMA property *)
  PSIGsigncoll  (* collision between independently gen. keys *)
).
*)


fun skgen(keyseed):skey.
fun pkgen(keyseed):pkey.

fun SIGsign(bitstring, skey): bitstring.
fun SIGverify(bitstring, pkey, bitstring): bool.

equation forall m:bitstring, r:keyseed; 
	SIGverify(m, pkgen(r), SIGsign(m, skgen(r))) = true.

collision r <-R keyseed; forall Y:pkey; 
	return(pkgen(r) = Y) <=(PSIGsigncoll)=> return(false) if Y independent-of r.

table keys(host, pkey).


(* Big ufcma definition, scary *)
param N, N2, N3, N4.
alias skgen2 = skgen.
alias pkgen2 = pkgen.
alias SIGsign2 = SIGsign.
alias SIGverify2 = SIGverify.
equiv(uf_cma_corrupt(SIGsign))
       foreach i3 <= N3 do r <-R keyseed; (
           Opk() [useful_change] [2] := return(pkgen(r)) |
	   foreach i2 <= N2 do  Osign(x: bitstring) [useful_change] := return(SIGsign(x, skgen(r))) |
	   foreach i <= N do OSIGverify(m1: bitstring, si1:bitstring) [useful_change] := return(SIGverify(m1, pkgen(r), si1)) |
	   Ocorrupt() [10] := return(r)) |
       foreach i4 <= N4 do OSIGverify2(m: bitstring, y: pkey, si: bitstring) [3] := return(SIGverify(m, y, si)) [all]
     <=(N3 * PSIGsign(time + (N4+N-1) * time(SIGverify, max(maxlength(m1), maxlength(m)), max(maxlength(si1), maxlength(si))) + (N3-1)*(time(pkgen) + time(skgen) + N2 * time(SIGsign, maxlength(x)) + N * time(SIGverify, maxlength(m1), maxlength(si1))), N2, maxlength(x)))=> [manual,computational]
       foreach i3 <= N3 do r <-R keyseed [unchanged]; (
           Opk() := return(pkgen2(r)) |
	   foreach i2 <= N2 do Osign(x: bitstring) := return(SIGsign(x, skgen2(r))) |
	   foreach i <= N do OSIGverify(m1: bitstring, si1:bitstring) := 
	        if defined(corrupt) then return(SIGverify2(m1, pkgen2(r), si1)) else
                find j <= N2 suchthat defined(x[j]) && m1 = x[j] && SIGverify2(m1, pkgen2(r), si1) then return(true) else return(false) |
	   Ocorrupt() := let corrupt: bool = true in return(r)) |
       foreach i4 <= N4 do OSIGverify2(m: bitstring, y: pkey, si: bitstring) :=
		find k <= N3 suchthat defined(r[k],corrupt[k]) && y = pkgen2(r[k]) then return(SIGverify2(m, y, si)) else
		find j <= N2, k <= N3 suchthat defined(x[j,k],r[k]) && y = pkgen2(r[k]) && m = x[j,k] && SIGverify2(m, y, si) then return(true) else
		find k <= N3 suchthat defined(r[k]) && y = pkgen2(r[k]) then return(false) else
		return(SIGverify(m,y,si)).



(*
=====================
Security queries
=====================
*)

(* Queries and Events *)

(*
Secrecy query:

kCtest is an array of values, each cell being populated by some client session with its
derived secret key, whenever the client accepted and derived a key
while talking to an honest server (honest s_pk) which has not been compromised
yet.

kStest is an array of values, each cell being populated by some server session with its
derived secret key, whenever the server accepted and derived a key
after receiving an honest client ephemeral share (honest x_pk)

CryptoVerif "query secret val" command test if each cell of the array
(thus each correspinding session key), is real-or-random, assuming the
rest of the array is compromised.

*)

query secret kCtest.
query secret kStest.

event ClientAccept(pkey, G, G).
event ServerAccept(pkey, G, G).

(* CryptoVerif can also prove injective authentication with dedicated queries. *)
query s_pk:pkey, x_pk,y_pk:G;
  inj-event(ClientAccept(s_pk,x_pk,y_pk)) ==> inj-event(ServerAccept(s_pk,x_pk,y_pk))
  public_vars kCtest,kStest.



(*
=====================
Protocol model
=====================
*)

(* number of replication parameters *)
param NC, NS, NS2.


let Client(hf:hashfunction, s_pkC:pkey) =
  OC1() :=
    let (x_sk:Z,x_pk:G) = DHkeygen() in
    return(x_pk);

  OC3(y_pk:G, s:bitstring) :=

   (* we declare a boolean on whether this is an honest session or not. *)
    let honestSession =
        (* does there exist a server session with the same s_pk *)
    	find iS <= NS suchthat defined(s_pk[iS]) && s_pk[iS] = s_pkC then
	   (* and for which the key has not yet been compromised ? *)
	   (if defined(compromisedServer[iS]) then
	     false
           else
	     true
	   )
	else
	false
    in

    if SIGverify(msg2(x_pk, y_pk), s_pkC, s) then    
    (* <!> we use the builtin signature function of CryptoVerif, which
    does not have the arguments in the same order as the protocol set
    specification. *)    
    kC <- Hash(hf, exp(y_pk, x_sk));

   (* if the session is honest *)
    if honestSession then
        (* we put the derived key in the target secret array *)
        kCtest : key <- kC;
	(* we raise the client side authentication event *)
    	event ClientAccept(s_pkC,x_pk, y_pk).


let Server(hf:hashfunction, s_sk:skey, s_pkS:pkey) =
  OS2(x_pkS:G) :=
    (* we declare a boolean on whether this is an honest session or not. *)
    let honestSession =
       (* does there exists a client session with the same x_pk ? *)
       find iC <= NC suchthat defined(x_pk[iC]) && x_pk[iC] = x_pkS then
            true
       else
	    false
    in
    
    let (y_sk:Z,y_pk:G) = DHkeygen() in  
    sig <- SIGsign(msg2(x_pkS,y_pk),s_sk);
    kS <- Hash(hf, exp(x_pkS, y_sk));
    event ServerAccept(s_pkS,x_pkS,y_pk);
    return(y_pk,sig);

   
    Otest() :=       
      (* if the session is honest, we put the derived key in the target secret array. *)
      if honestSession then
        kStest : key <- kS;
	yield
      else
       return(kS).

    
letfun keygen() =
  rk <-R keyseed;
  sk <- skgen(rk);
  pk <- pkgen(rk);
  (sk, pk).

process
  Ostart() := 
    hf <-R hashfunction;  (* initialize the hash function. *)
    return ();

    (
     (foreach iC <= NC do
      (* spawn an unbounded number of clients talking to anybody *)
      OInitClient(s_pkC:pkey) :=
         return ();
         run Client(hf, s_pkC)
     )
     |
     (foreach iS <= NS do

     (* spawn an unbounded number of servers *)
      OInitServer() :=
          let (s_sk: skey, s_pk: pkey) = keygen() in
	  return(s_pk);

	  (* enable compromise of server secret keys *)
	  (OCompromise() := compromisedServer : bool <- true; return(s_sk))
	  |
	  (

	  (* spawn an unbounded number of server sessions *)
	  foreach iS2 <= NS2 do
	    run Server(hf, s_sk, s_pk))
	  )  
     |
      (* give acces to the attacker to the ROM *)
      run Hashoracle(hf)
    )


(* Bound discussion *)
(*
The bound obtained with Cryptoverif for the secrecy of kCtest is as follows:

RESULT Proved secrecy of kCtest up to probability
(2 * qH * #OS2^2 * NC + 2 * #OS2^3 * NC) * pCDH(time_2)
+ (6 * #OS2^2 * NC^2 + 4 * #OS2 * NC * qH + 2 * #OS2^2 * NC) * PCollKey2
+ (8 * NC^2 + 2 * NC * NS2 + 8 * #OS2 * NC) * PCollKey1
+ 2 * NS * PSIGsign(time_1, NS2)

The intuitive expected bound is close to:
  the adversary obtain the exponent of a group element +
  two computed keys collide  
  DH public keys collided +
  the attacker forges one of the SIGsignature for a public key 

which yields
 (number of possible DH elements)*pCDH +
 (number of possible key pairs)* PCollKey2 + 
 (number of keys) * PCollKey1 +
 (number of servers) pSIGsign +


*)